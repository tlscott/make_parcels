function [num_code,peak_labels,max_intersect_label] = labelParcels(P,D,parcel_nums)

HO_cort = MRIread('./template_brains/HarvardOxford-cort-maxprob-thr0-2mm.nii.gz',0);
HO_sub = MRIread('./template_brains/HarvardOxford-sub-maxprob-thr0-2mm.nii.gz',0);
Cereb = MRIread('./template_brains/Cerebellum-MNIfnirt-maxprob-thr0-2mm.nii.gz',0);

[~,HO_cort_label] = importHarvardOxfordLabels;
[~,HO_sub_label] = importHarvardOxfordLabels_subcort;
[~,Cereb_label] = importCerebellumLabels;

HO_cort_label = removeSpaces(HO_cort_label);
HO_sub_label = removeSpaces(HO_sub_label);
Cereb_label = removeSpaces(Cereb_label);

peak_labels = cell(length(parcel_nums),1);
max_intersect_label = peak_labels;

for i = 1:length(parcel_nums)
    
    peak_vox(i) = find((P == parcel_nums(i)),1);
    num_code(i) = HO_cort.vol(peak_vox(i));
    
    if num_code(i) ~= 0
        if HO_sub.vol(peak_vox(i)) <= 7
            hemi = 'Left_';
        else 
            hemi = 'Right_';
        end
        peak_labels(i) = strcat(hemi,HO_cort_label(num_code(i)));
    else
        num_code(i) = HO_sub.vol(peak_vox(i));
        if num_code ~= 0
            peak_labels(i) = HO_sub_label(num_code(i));
        else
            num_code(i) = Cereb.vol(peak_vox(i));
            if num_code ~= 0
                peak_labels(i) = Cereb_label(num_code(i));
            else
                peak_labels(i) = {'unidentified'};
            end
        end
    end
  
    max_code(i) = get_max_intersect(HO_cort.vol,D,parcel_nums(i));
    
    if max_code(i) ~= 0
        if HO_sub.vol(peak_vox(i)) <= 7
            hemi = 'Left_';
        else 
            hemi = 'Right_';
        end
        max_intersect_label(i) = strcat(hemi,HO_cort_label(max_code(i)));
    else
        max_code(i) = get_max_intersect(HO_sub.vol,D,parcel_nums(i));
        if max_code(i) ~= 0
            max_intersect_label(i) = HO_sub_label(max_code(i));
        else
            max_code(i) = get_max_intersect(Cereb.vol,D,parcel_nums(i));
            if max_code(i) ~= 0
                max_intersect_label(i) = Cereb_label(max_code(i));
            else
                max_intersect_label(i) = {'unidentified'};
            end
        end
    end
    
    
end

function new_string_list = removeSpaces(old_string_list)
new_string_list = old_string_list;
for i = 1:length(new_string_list)
    new_string_list{i} = strrep(new_string_list{i},' ','_');
    new_string_list{i} = strrep(new_string_list{i},',','');
end

function max_code = get_max_intersect(vol,D,parcel_num)
temp_codes_cort = vol(D == parcel_num);
[c, ia, ic] = unique(temp_codes_cort);
a_counts = accumarray(ic,1);
[~,max_idx] = max(a_counts);
max_code = c(max_idx);

function [HO_cort_code,HO_cort_label] = importHarvardOxfordLabels


%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tlscott/Documents/PWMDLD/NWR_NWD_PAPER/data/template_brains/HarvardOxford_cort_labels.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/06/21 14:34:01

%% Initialize variables.
filename = './template_brains/HarvardOxford_cort_labels.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{1};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch me
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 1);
rawCellColumns = raw(:, 2);


%% Allocate imported array to column variable names
HO_cort_code = cell2mat(rawNumericColumns(:, 1));
HO_cort_label = rawCellColumns(:, 1);

HO_cort_code = HO_cort_code + 1;

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

function [HO_sub_codes,HO_sub_labels] = importHarvardOxfordLabels_subcort

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tlscott/Documents/PWMDLD/NWR_NWD_PAPER/data/template_brains/HarvardOxford_sub_labels.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/06/21 14:38:52

%% Initialize variables.
filename = './template_brains/HarvardOxford_sub_labels.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{1};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch me
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 1);
rawCellColumns = raw(:, 2);


%% Allocate imported array to column variable names
HO_sub_codes = cell2mat(rawNumericColumns(:, 1));
HO_sub_labels = rawCellColumns(:, 1);

HO_sub_codes = HO_sub_codes + 1;

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

function [Cereb_codes,Cereb_labels] = importCerebellumLabels

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tlscott/Documents/PWMDLD/NWR_NWD_PAPER/data/template_brains/Cerebellum-SUIT.nii.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/06/21 14:41:02

%% Initialize variables.
filename = './template_brains/Cerebellum-SUIT.nii.txt';
delimiter = ' ';

%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Cereb_codes = dataArray{:, 1};
Cereb_labels = dataArray{:, 2};
Cereb_other = dataArray{:, 3};


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;